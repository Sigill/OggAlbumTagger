#!/usr/bin/env ruby

require 'rubygems'

require 'ogg_album_tagger/version'
require 'ogg_album_tagger/library'
require 'ogg_album_tagger/ogg_file'
require 'ogg_album_tagger/cli'

require 'readline'
require 'optparse'

def list_ogg_files dir
    Dir.chdir(dir) do
        return Dir.glob("**/*.ogg").sort.map { |f| Pathname.new(dir).join(f) }
    end
end

options = {album: false}
option_parser = OptionParser.new do |opts|
    executable_name = File.basename($PROGRAM_NAME)
    opts.banner = "Interactive edition of ogg tags with album/compilation support.\n" +
                  "Usage: #{executable_name} [options] files|directories"

    opts.separator "Options:"

    opts.on("-a", "--album", "Album mode: treat a single directory as an album.") do
        options[:album] = true
    end

    opts.on("-v", "--version", "Display version information and exit.") do
        puts "OggAlbumTagger #{OggAlbumTagger::VERSION}"
        exit
    end

    opts.on("-h", "--help", "Print this help and exit.") do
        puts opts
        exit
    end

    opts.separator ""
    opts.separator "OggAlbumTagger is released under the terms of the MIT License."
    opts.separator "For more informations, updates and bug reports, see https://github.com/Sigill/OggAlbumTagger."
end

option_parser.parse!

if ARGV.size == 0
    puts option_parser
    exit
else
    if options[:album]
        unless ARGV.size == 1 and File.directory?(ARGV[0])
            abort "Error: in album mode, you have to provide a single directory as argument."
        end
    end

    files = []
    ARGV.each do |arg|
        begin
            if File.directory?(arg)
                files.concat list_ogg_files(arg)
            elsif File.file?(arg)
                files << Pathname.new(arg)
            else
                raise Errno::ENOENT
            end
        rescue Errno::ENOENT
            abort "#{arg} does not exists."
        end
    end

    begin
        containers = files.map { |f| OggAlbumTagger::OggFile.new(f) }
        $library = OggAlbumTagger::Library.new(options[:album] ? Pathname.new(ARGV[0]) : nil, containers)
        $interpreter = OggAlbumTagger::CLI.new($library)
    rescue OggAlbumTagger::Error => ex
        abort ex.message
    end
end

$interpreter.configure_readline
Readline.completion_proc = ->(input) {
    $interpreter.autocomplete(Readline.line_buffer, Readline.point, input)
    # puts input
    # return []
}

loop do
    command = Readline.readline("> ", true)
    break if command.nil? or command.eql?('exit') or command.eql?('quit')

    begin
        $interpreter.execute_command(command.strip)
    rescue OggAlbumTagger::Error => ex
        puts ex
    end
end
