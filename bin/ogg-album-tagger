#!/usr/bin/env ruby

require 'rubygems'

require 'ogg_album_tagger/album'
require 'ogg_album_tagger/picture'
require 'ogg_album_tagger/tag_container'
require 'ogg_album_tagger/command_error'

require 'readline'
require 'optparse'
require 'shellwords'
require 'open3'
require 'fileutils'

def autocomplete(input)
	context = Readline.line_buffer.slice(0, Readline.point - input.length)
	begin
		args = Shellwords.shellwords(context)

		# If there is no space after a quoted string, no autocompletion,
		# or we may end up with things like "something"somethingelse
		return [] if context.size > 0 and Readline.completer_quote_characters.include?(context[-1])
	rescue ArgumentError => ex
		# We are autocompleting a quoted string
		# The quote will be the last item in the context, so we dump it
		context.slice!(-1) if context.size > 0 and Readline.completer_quote_characters.include?(context[-1])
		begin
			args = Shellwords.shellwords(context)
		rescue ArgumentError => ex
			return []
		end
	end

	props = []

	if args.empty? then props = %w{ls select show set add rm auto write help exit quit}
	elsif %w{ls select help exit quit}.include?(args[0]) then props = []
	elsif args[0] == 'show'
		if args.size == 1
			props = %w{tag}
		elsif args.size == 2
			props = $album.tags_used
		end
	elsif %w{add set}.include? args[0]
		if args.size == 1
			props = $album.tags_used
		elsif %w{METADATA_BLOCK_PICTURE PICTURE}.include? args[1].upcase
			if args.size == 2
				props = Readline::FILENAME_COMPLETION_PROC.call(input)
			end
		end
	elsif args[0] == 'rm'
		if args.size == 1
			props = $album.tags_used
		else
			tag = args[1].upcase
			if tag == 'METADATA_BLOCK_PICTURE'
				$stderr.puts
				$stderr.puts "Autocompletion is not supported for pictures"
				Readline.refresh_line
			else props = $album.summary(tag)[tag].values.flatten.uniq
			end
		end
	elsif args[0] == 'auto'
		if args.length == 1
			props = %w{tracknumber rename}
		end
	end

	(props || []).grep(/^#{Regexp.escape(input)}/).map do |v|
		v.include?(' ') ? "\"#{v}\"" : v
	end
end

def print_album_summary(summary)
	OggAlbumTagger::TagContainer.sorted_tags(summary.keys) do |tag|
		puts tag

		if (summary[tag].size == $album.selected_files.size) && (summary[tag].values.uniq.length == 1)
			#Â If all tracks have only one common value
			puts "\t" + OggAlbumTagger::TagContainer::pp_tag(summary[tag].first[1])
		else
			summary[tag].keys.sort.each do |i|
				values = summary[tag][i]
				puts sprintf("\t%4d: %s", i+1, OggAlbumTagger::TagContainer::pp_tag(values))
			end
		end
	end
end

def show_command(command)
	case command.length
	when 0
		print_album_summary($album.summary)
	else
		case command[0]
		when 'tag'
			if command.size == 1 then puts 'You need to specify a tag name'
			else print_album_summary $album.summary(command[1].upcase)
			end
		else
			puts "Unknown command 'show #{command[0]}'"
		end
	end
end

def ls_command
	$album.ls().each do |f|
		puts sprintf("%s %4d: %s", (f[:selected] ? '*' : ' '), f[:position], f[:file])
	end
end

def handle_picture_args args
	if %w{METADATA_BLOCK_PICTURE PICTURE}.include? args[0].upcase
		file = args[1]
		desc = args.length == 2 ? args[1] : ''
		args.clear
		args << 'METADATA_BLOCK_PICTURE'
		args << OggAlbumTagger::Picture::generate_metadata_block_picture(file, desc)
	end
end

def execute_command(command_line)
	begin
		command, *args = Shellwords.shellwords(command_line)
	rescue Exception => ex
		puts 'Invalid command.'
		return
	end

	begin
		case command
		when 'ls' then ls_command()
		when 'select'
			if args.length < 1
				puts 'You need to specify the files you want to select. Either enter "all", a single number or a range (ex. "3-5").', 'Number and range based selections can be made cumulative by adding a plus or minus sign in front of the selector (ex. "-1-3").'
			else
				$album.select(args)
				ls_command()
			end
		when 'show' then show_command(args)
		when 'set'
			if args.length < 2
				puts 'You need to specify the tag to edit and at least one value.'
			else
				handle_picture_args(args)
				$album.set_tag(*args)
				show_command(['tag', args[0]])
			end
		when 'add'
			if args.length < 2
				puts 'You need to specify the tag to edit and at least one value.'
			else
				handle_picture_args(args)
				$album.add_tag(*args)
				show_command(['tag', args[0]])
			end
		when 'rm'
			if args.length < 1
				puts 'You need to specify the tag to edit and eventually one or several values.'
			else
				$album.rm_tag(*args)
				show_command(['tag', args[0]])
			end
		when 'auto'
			if args.length < 1
				puts 'You need to specify the auto command you want to execute.'
			else
				case args[0]
				when 'tracknumber' then $album.auto_tracknumber()
				when 'rename'
					dummy, *cli_args = args

					options = {}
					begin
						OptionParser.new do |opts|
							opts.on('--album-date DATE', 'Album date') { |date| options[:album_date] = date }
						end.parse(cli_args)
					rescue OptionParser::ParseError => ex
						raise OggAlbumTagger::CommandError, ex.message
					end

					$album.auto_rename(options)
					ls_command()
				end
			end
		when 'write'
			$album.write
		when 'help'
			# TODO
		else
			puts "Unknown command \"#{command}\""
		end
	rescue OggAlbumTagger::CommandError => err
		puts err
	end
end

def main(album_dir)
	$album = OggAlbumTagger::Album.new(album_dir)

	Readline.completion_append_character = " "
	Readline.completer_quote_characters = "\"'"
	Readline.completion_proc = ->(input) {
		autocomplete(input)
	}

	loop do
		command = Readline.readline("> ", true)
		break if command.nil? or command.eql?('exit') or command.eql?('quit')

		execute_command(command.strip)
	end
end

option_parser = OptionParser.new do |opts|
	executable_name = File.basename($PROGRAM_NAME)
	opts.banner = "Interactive edition of ogg tags in an album or a compilation.
Usage: #{executable_name} <album directory>"
end.parse!

album_dir = ARGV.shift
if album_dir && Dir.exists?(album_dir)
	main(album_dir)
else
	STDERR.puts "Error: This album does not exists."
	exit 1
end
