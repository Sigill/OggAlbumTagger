#!/usr/bin/env ruby

require 'rubygems'
require 'pp'
require 'readline'
require 'optparse'
require 'pathname'
require 'set'
require 'shellwords'
require 'open3'
require 'base64'
require 'exiftool'

def pp_tag values
	values_str = values.map { |v| v.to_s.length > 64 ? (v.to_s.slice(0, 64) + '...') : v }

	case values.length
	when 0 then '- (empty)'
	when 1 then values_str[0]
	else sprintf("(%d) [%s]", values.length, values_str.join(', '))
	end
end

def flac_block_picture(image, desc = '')
	begin
		image = File.expand_path(image)
		img = Exiftool.new(image)
		content = IO.binread(image)
	rescue
		raise ArgumentError, "\"#{image}\" cannot be read"
	end

	meta = img.results[0].to_hash
	mime = meta[:mime_type]

	raise(ArgumentError, "Unsupported image type. Use JPEG or PNG.") unless ['image/png', 'image/jpeg'].include?(mime)

	pack = [
		3, # Front cover
		mime.length,
		mime,
		desc.bytesize,
		desc,
		meta[:image_width],
		meta[:image_height],
		meta[:color_components] * meta[:bits_per_sample],
		0, # palette
		content.length,
		content
	].pack(sprintf("L>L>A%dL>a%dL>L>L>L>L>a*", mime.length, desc.bytesize))
	Base64.strict_encode64(pack)
end

class TagContainer < Hash
	def initialize(file)
		super() { |h, k| h[k] = Set.new }

		dump = `vorbiscomment -l "#{file}"`
		dump.each_line do |l|
			tag, value = l.split('=', 2)
			self[tag.upcase].add(value.strip)
		end
	end

	def to_s
		TagContainer.sorted_tags(self.keys).map do |tag|
			s.push pp_tag(self[tag])
		end.join "\n"
	end

	def vorbiscomment_dump
		dump = []

		TagContainer.sorted_tags(self.keys) do |tag|
			self[tag].to_a.sort.each { |v| dump << "#{tag}=#{v}" }
		end

		dump.join "\n"
	end

	def self.sorted_tags(tags)
		a = tags.sort
		a.delete('METADATA_BLOCK_PICTURE') and a.push('METADATA_BLOCK_PICTURE')
		block_given? ? a.each { |v| yield v } : a
	end
end

class OggAlbum
	attr_reader :path
	attr_reader :files
	attr_reader :selected_files

	include Enumerable

	def initialize path
		@path = Pathname.new path
		@files = {}

		Dir.glob("#{path.gsub(/([\[\]\{\}\*\?\\])/, '\\\\\1')}/**/*.ogg") do |song|
			rel_path = Pathname.new(song).relative_path_from(@path)
			@files[rel_path] = TagContainer.new(song)
		end

		@selected_files = Set.new @files.keys
	end

	def tags_used
		s = Set.new
		@selected_files.each do |file|
			s.merge @files[file].keys
		end
		s.to_a.map { |v| v.downcase }
	end

	def summary(selected_tag = nil)
		data = Hash.new { |h, k| h[k] = Hash.new }

		positions = Hash[@files.keys.sort.each_with_index.to_a]

		@selected_files.each do |file|
			tags = @files[file]
			tags.each do |k, v|
				next unless selected_tag.nil? or k.eql?(selected_tag)
				data[k][positions[file]] = v.to_a.sort
			end
		end

		data
	end

	def write
		@files.each do |file, tags|
			o, s = Open3.capture2('vorbiscomment', '-w', File.join(@path, file), :stdin_data => tags.vorbiscomment_dump())
		end
	end

	def set_tag(tag, *values)
		tag.upcase!
		tag = 'METADATA_BLOCK_PICTURE' if tag == 'PICTURE'
		if tag == 'METADATA_BLOCK_PICTURE'
			values = [ flac_block_picture(values[0], values.length == 2 ? values[1] : '') ]
		end
		@selected_files.each { |file| @files[file][tag].replace(values) }
	end

	def add_tag(tag, *values)
		tag.upcase!
		tag = 'METADATA_BLOCK_PICTURE' if tag == 'PICTURE'
		if tag == 'METADATA_BLOCK_PICTURE'
			values = [ flac_block_picture(values[0], values.length == 2 ? values[1] : '') ]
		end
		@selected_files.each { |file| @files[file][tag].merge(values) }
	end

	def rm_tag(tag, *values)
		tag.upcase!
		@selected_files.each do |file|
			tags = @files[file]
			if values.empty? then tags.delete(tag)
			else tags[tag].subtract(values)
			end
		end
	end

	def ls
		out = []
		@files.keys.sort.each_with_index do |file, i|
			out.push sprintf("%s %4d: %s", (@selected_files.include?(file) ? '*' : ' '), i+1, file)
		end
		out.join("\n")
	end

	def select(args)
		all_files = @files.keys.sort
		mode = :absolute

		first_rel = !!(args.first =~ /^[+-]/)

		sel = first_rel ? Set.new(@selected_files) : Set.new

		args.each do |selector|
			case selector
			when 'all'
				raise "Cannot use the \"#{selector}\" selector after a cumulative selector (+/-...)" if mode == :cumulative
				sel.replace all_files
			when /^([+-]?)([1-9]\d*)$/
				i = $2.to_i - 1
				raise "Item #{$2} is out of range" if i >= all_files.length

				items = [all_files.slice(i)]
				case $1
				when '-'
					sel.subtract items
					mode = :cumulative
				when '+'
					sel.merge items
					mode = :cumulative
				else
					raise "Cannot use the \"#{selector}\" selector after a cumulative selector (+/-...)" if mode == :cumulative
					sel.merge items
				end
			when /^([+-]?)(?:([1-9]\d*)-([1-9]\d*))$/
				i = $2.to_i - 1
				j = $3.to_i - 1
				raise "Range #{$2}-#{$3} is invalid" if i >= all_files.length or j >= all_files.length or i > j

				items = all_files.slice(i..j)
				case $1
				when '-'
					sel.subtract items
					mode = :cumulative
				when '+'
					sel.merge items
					mode = :cumulative
				else
					raise "Cannot use the \"#{selector}\" selector after a cumulative selector (+/-...)" if mode == :cumulative
					sel.merge items
				end
			end
		end

		@selected_files.replace sel
	end

	def auto_tracknumber
		@selected_files.sort.each_with_index do |file, i|
			@files[file]['TRACKNUMBER'].replace([(i+1).to_s])
		end
	end
end

option_parser = OptionParser.new do |opts|
	executable_name = File.basename($PROGRAM_NAME)
	opts.banner = "Interactively edit an ogg album
Usage: #{executable_name} <album directory>"
end.parse!

def autocomplete(input)
	context = Readline.line_buffer.slice(0, Readline.point - input.length)
	begin
		args = Shellwords.shellwords(context)

		# If there is no space after a quoted string, no autocompletion,
		# or we may end up with things like "something"somethingelse
		return [] if context.size > 0 and Readline.completer_quote_characters.include?(context[-1])
	rescue ArgumentError => ex
		# We are autocompleting a quoted string
		# The quote will be the last item in the context, so we dump it
		context.slice!(-1) if context.size > 0 and Readline.completer_quote_characters.include?(context[-1])
		begin
			args = Shellwords.shellwords(context)
		rescue ArgumentError => ex
			return []
		end
	end

	props = []

	if args.empty? then props = %w{ls select show set add rm auto write help exit quit}
	elsif %w{ls select help exit quit}.include?(args[0]) then props = []
	elsif args[0] == 'show'
		if args.size == 1
			props = %w{tag}
		elsif args.size == 2
			props = $album.tags_used
		end
	elsif %w{add set}.include? args[0]
		if args.size == 1
			props = $album.tags_used # TODO add picture
		elsif %w{METADATA_BLOCK_PICTURE PICTURE}.include? args[1].upcase
			if args.size == 2
				props = Readline::FILENAME_COMPLETION_PROC.call(input)
			end
		end
	elsif args[0] == 'rm'
		if args.size == 1
			props = $album.tags_used
		else
			tag = args[1].upcase
			if tag == 'METADATA_BLOCK_PICTURE'
				$stderr.puts
				$stderr.puts "Autocompletion is not supported for pictures"
				Readline.refresh_line
			else props = $album.summary(tag)[tag].values.flatten.uniq
			end
		end
	elsif args[0] == 'auto'
		props = %w{tracknumber}
	end

	(props || []).grep(/^#{Regexp.escape(input)}/).map do |v|
		v.include?(' ') ? "\"#{v}\"" : v
	end
end

def main(album_dir)
	$album = OggAlbum.new(album_dir)

	Readline.completion_append_character = " "
	#Readline.completer_word_break_characters = "\x00"
	Readline.completer_quote_characters = "\"'"
	Readline.completion_proc = ->(input) {
		autocomplete(input)
	}

	loop do
		command = Readline.readline("> ", true)
		break if command.nil? or command.eql?('exit') or command.eql?('quit')

		execute_command(command.strip)
	end
end

def print_album_summary(summary)
	TagContainer.sorted_tags(summary.keys) do |tag|
		puts tag

		if summary[tag].values.uniq.length == 1
			puts "\t#{pp_tag(summary[tag].first[1])}"
		else
			summary[tag].keys.sort.each do |i|
				values = summary[tag][i]
				puts sprintf("\t%4d: %s", i+1, pp_tag(values))
			end
		end
	end
end

def show_command(command)
	case command.length
	when 0
		print_album_summary($album.summary)
	else
		case command[0]
		when 'tag'
			if command.size == 1 then puts 'You need to specify a tag name'
			else print_album_summary $album.summary(command[1].upcase)
			end
		else
			puts "Unknown command 'show #{command[0]}'"
		end
	end
end

def execute_command(command_line)
	begin
		command, *args = Shellwords.shellwords(command_line)
	rescue Exception => ex
		puts command line, "Invalid command"
		return
	end

	case command
	when 'ls' then puts $album.ls()
	when 'select'
		if args.length < 1
			puts 'You need to specify the files you want to select. Either enter "all", a single number or a range ("3-5").', 'Number and range based selections can be made cumulative by adding a plus or minus sign in front of the selector (ex. "-1-3")'
		else
			begin
				$album.select(args)
				puts $album.ls()
			rescue Exception => err
				puts err
			end
		end
	when 'show' then show_command(args)
	when 'set'
		if args.length < 2
			puts 'You need to specify the tag to edit and at least one value.'
		else
			$album.set_tag(*args)
		end
	when 'add'
		if args.length < 2
			puts 'You need to specify the tag to edit and at least one value.'
		else
			$album.add_tag(*args)
		end
	when 'rm'
		if args.length < 1
			puts 'You need to specify the tag to edit and eventually one or several values.'
		else
			$album.rm_tag(*args)
		end
	when 'auto'
		if args.length < 1
			puts 'You need to specify the auto command you want to execute.'
		else
			if args[0] == 'tracknumber'
				$album.auto_tracknumber()
			end
		end
	when 'write'
		$album.write
	when 'help'
	else
		puts "Unknown command \"#{command}\""
	end
end

album_dir = ARGV.shift
if album_dir && Dir.exists?(album_dir)
	main(album_dir)
else
	STDERR.puts "error: you must provide a JSON file as an argument"
	exit 1
end
